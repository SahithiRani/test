Terminals unused in grammar

    ELIF
    PRINT
    SCAN


Grammar

    0 $accept: program $end

    1 program: items_list
    2        | error

    3 items_list: item items_list
    4           | %empty

    5 item: function
    6     | stmt

    7 function: FUNC function_name '{' stmts_list '}'

    8 function_name: data_type ID '(' params ')'

    9 params: param_list
   10       | %empty

   11 param_list: param_list ',' param
   12           | param

   13 stmts_list: stmt stmts_list
   14           | %empty

   15 $@1: %empty

   16 stmt: $@1 withSemcol ';'
   17     | withoutSemcol

   18 withSemcol: param
   19           | assign_stmt
   20           | array_decl
   21           | return_stmt
   22           | func_call
   23           | BREAK
   24           | CONTINUE

   25 withoutSemcol: loop
   26              | conditional

   27 assign_stmt: param assignment
   28            | arr assignment

   29 loop: LOOP

   30 conditional: IF '(' conditions ')' '{' stmts_list '}' else_stmt

   31 else_stmt: ELSE '{' stmts_list '}'
   32          | %empty

   33 conditions: boolean
   34           | boolean bi_logic_cond conditions
   35           | NOT conditions

   36 boolean: boolean rel_op expr
   37        | expr

   38 return_stmt: RETURN expr

   39 array_decl: param '[' INT_CONST ']' array_assign

   40 func_call: ID '(' args_list ')'

   41 args_list: args
   42          | %empty

   43 args: args ',' expr
   44     | expr

   45 array_assign: ASSIGN '[' id_list ']'
   46             | %empty

   47 id_list: id_list ',' constant
   48        | constant

   49 param: data_type ID

   50 assignment: ASSIGN expr

   51 expr: expr op value
   52     | value

   53 value: func_call
   54      | constant
   55      | arr

   56 arr: ID '[' expr ']'
   57    | ID

   58 data_type: INT
   59          | BOOLEAN
   60          | CHAR
   61          | DOUBLE
   62          | VOID

   63 op: ADD
   64   | SUB
   65   | MUL
   66   | DIV

   67 rel_op: LTE
   68       | GTE
   69       | '<'
   70       | '>'
   71       | EQ
   72       | NEQ

   73 bi_logic_cond: AND
   74              | OR
   75              | XOR

   76 constant: INT_CONST
   77         | SUB INT_CONST
   78         | STR_CONST
   79         | BOOL_CONST
   80         | FLOAT_CONST
   81         | SUB FLOAT_CONST


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 8 30 40
    ')' (41) 8 30 40
    ',' (44) 11 43 47
    ';' (59) 16
    '<' (60) 69
    '>' (62) 70
    '[' (91) 39 45 56
    ']' (93) 39 45 56
    '{' (123) 7 30 31
    '}' (125) 7 30 31
    error (256) 2
    ADD (258) 63
    SUB (259) 64 77 81
    MUL (260) 65
    DIV (261) 66
    ASSIGN (262) 45 50
    AND (263) 73
    OR (264) 74
    XOR (265) 75
    LTE (266) 67
    GTE (267) 68
    EQ (268) 71
    NEQ (269) 72
    NOT (270) 35
    INT_CONST <yint> (271) 39 76 77
    BOOL_CONST <yint> (272) 79
    FLOAT_CONST <ydou> (273) 80 81
    STR_CONST <ystr> (274) 78
    ID <ystr> (275) 8 40 49 56 57
    IF (276) 30
    ELSE (277) 31
    ELIF (278)
    LOOP (279) 29
    VOID (280) 62
    INT (281) 58
    DOUBLE (282) 61
    BOOLEAN (283) 59
    CHAR (284) 60
    BREAK (285) 23
    PRINT (286)
    SCAN (287)
    FUNC (288) 7
    RETURN (289) 38
    CONTINUE (290) 24


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1 2
        on right: 0
    items_list (48)
        on left: 3 4
        on right: 1 3
    item (49)
        on left: 5 6
        on right: 3
    function (50)
        on left: 7
        on right: 5
    function_name (51)
        on left: 8
        on right: 7
    params (52)
        on left: 9 10
        on right: 8
    param_list (53)
        on left: 11 12
        on right: 9 11
    stmts_list (54)
        on left: 13 14
        on right: 7 13 30 31
    stmt (55)
        on left: 16 17
        on right: 6 13
    $@1 (56)
        on left: 15
        on right: 16
    withSemcol (57)
        on left: 18 19 20 21 22 23 24
        on right: 16
    withoutSemcol (58)
        on left: 25 26
        on right: 17
    assign_stmt (59)
        on left: 27 28
        on right: 19
    loop (60)
        on left: 29
        on right: 25
    conditional (61)
        on left: 30
        on right: 26
    else_stmt (62)
        on left: 31 32
        on right: 30
    conditions (63)
        on left: 33 34 35
        on right: 30 34 35
    boolean (64)
        on left: 36 37
        on right: 33 34 36
    return_stmt (65)
        on left: 38
        on right: 21
    array_decl (66)
        on left: 39
        on right: 20
    func_call (67)
        on left: 40
        on right: 22 53
    args_list (68)
        on left: 41 42
        on right: 40
    args (69)
        on left: 43 44
        on right: 41 43
    array_assign (70)
        on left: 45 46
        on right: 39
    id_list (71)
        on left: 47 48
        on right: 45 47
    param (72)
        on left: 49
        on right: 11 12 18 27 39
    assignment (73)
        on left: 50
        on right: 27 28
    expr (74)
        on left: 51 52
        on right: 36 37 38 43 44 50 51 56
    value (75)
        on left: 53 54 55
        on right: 51 52
    arr (76)
        on left: 56 57
        on right: 28 55
    data_type (77)
        on left: 58 59 60 61 62
        on right: 8 49
    op (78)
        on left: 63 64 65 66
        on right: 51
    rel_op (79)
        on left: 67 68 69 70 71 72
        on right: 36
    bi_logic_cond (80)
        on left: 73 74 75
        on right: 34
    constant (81)
        on left: 76 77 78 79 80 81
        on right: 47 48 54


State 0

    0 $accept: • program $end

    error  shift, and go to state 1
    IF     shift, and go to state 2
    LOOP   shift, and go to state 3
    FUNC   shift, and go to state 4

    $end      reduce using rule 4 (items_list)
    ID        reduce using rule 15 ($@1)
    VOID      reduce using rule 15 ($@1)
    INT       reduce using rule 15 ($@1)
    DOUBLE    reduce using rule 15 ($@1)
    BOOLEAN   reduce using rule 15 ($@1)
    CHAR      reduce using rule 15 ($@1)
    BREAK     reduce using rule 15 ($@1)
    RETURN    reduce using rule 15 ($@1)
    CONTINUE  reduce using rule 15 ($@1)

    program        go to state 5
    items_list     go to state 6
    item           go to state 7
    function       go to state 8
    stmt           go to state 9
    $@1            go to state 10
    withoutSemcol  go to state 11
    loop           go to state 12
    conditional    go to state 13


State 1

    2 program: error •

    $default  reduce using rule 2 (program)


State 2

   30 conditional: IF • '(' conditions ')' '{' stmts_list '}' else_stmt

    '('  shift, and go to state 14


State 3

   29 loop: LOOP •

    $default  reduce using rule 29 (loop)


State 4

    7 function: FUNC • function_name '{' stmts_list '}'

    VOID     shift, and go to state 15
    INT      shift, and go to state 16
    DOUBLE   shift, and go to state 17
    BOOLEAN  shift, and go to state 18
    CHAR     shift, and go to state 19

    function_name  go to state 20
    data_type      go to state 21


State 5

    0 $accept: program • $end

    $end  shift, and go to state 22


State 6

    1 program: items_list •

    $default  reduce using rule 1 (program)


State 7

    3 items_list: item • items_list

    IF    shift, and go to state 2
    LOOP  shift, and go to state 3
    FUNC  shift, and go to state 4

    $end      reduce using rule 4 (items_list)
    $default  reduce using rule 15 ($@1)

    items_list     go to state 23
    item           go to state 7
    function       go to state 8
    stmt           go to state 9
    $@1            go to state 10
    withoutSemcol  go to state 11
    loop           go to state 12
    conditional    go to state 13


State 8

    5 item: function •

    $default  reduce using rule 5 (item)


State 9

    6 item: stmt •

    $default  reduce using rule 6 (item)


State 10

   16 stmt: $@1 • withSemcol ';'

    ID        shift, and go to state 24
    VOID      shift, and go to state 15
    INT       shift, and go to state 16
    DOUBLE    shift, and go to state 17
    BOOLEAN   shift, and go to state 18
    CHAR      shift, and go to state 19
    BREAK     shift, and go to state 25
    RETURN    shift, and go to state 26
    CONTINUE  shift, and go to state 27

    withSemcol   go to state 28
    assign_stmt  go to state 29
    return_stmt  go to state 30
    array_decl   go to state 31
    func_call    go to state 32
    param        go to state 33
    arr          go to state 34
    data_type    go to state 35


State 11

   17 stmt: withoutSemcol •

    $default  reduce using rule 17 (stmt)


State 12

   25 withoutSemcol: loop •

    $default  reduce using rule 25 (withoutSemcol)


State 13

   26 withoutSemcol: conditional •

    $default  reduce using rule 26 (withoutSemcol)


State 14

   30 conditional: IF '(' • conditions ')' '{' stmts_list '}' else_stmt

    SUB          shift, and go to state 36
    NOT          shift, and go to state 37
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    conditions  go to state 42
    boolean     go to state 43
    func_call   go to state 44
    expr        go to state 45
    value       go to state 46
    arr         go to state 47
    constant    go to state 48


State 15

   62 data_type: VOID •

    $default  reduce using rule 62 (data_type)


State 16

   58 data_type: INT •

    $default  reduce using rule 58 (data_type)


State 17

   61 data_type: DOUBLE •

    $default  reduce using rule 61 (data_type)


State 18

   59 data_type: BOOLEAN •

    $default  reduce using rule 59 (data_type)


State 19

   60 data_type: CHAR •

    $default  reduce using rule 60 (data_type)


State 20

    7 function: FUNC function_name • '{' stmts_list '}'

    '{'  shift, and go to state 49


State 21

    8 function_name: data_type • ID '(' params ')'

    ID  shift, and go to state 50


State 22

    0 $accept: program $end •

    $default  accept


State 23

    3 items_list: item items_list •

    $default  reduce using rule 3 (items_list)


State 24

   40 func_call: ID • '(' args_list ')'
   56 arr: ID • '[' expr ']'
   57    | ID •

    '('  shift, and go to state 51
    '['  shift, and go to state 52

    $default  reduce using rule 57 (arr)


State 25

   23 withSemcol: BREAK •

    $default  reduce using rule 23 (withSemcol)


State 26

   38 return_stmt: RETURN • expr

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    func_call  go to state 44
    expr       go to state 53
    value      go to state 46
    arr        go to state 47
    constant   go to state 48


State 27

   24 withSemcol: CONTINUE •

    $default  reduce using rule 24 (withSemcol)


State 28

   16 stmt: $@1 withSemcol • ';'

    ';'  shift, and go to state 54


State 29

   19 withSemcol: assign_stmt •

    $default  reduce using rule 19 (withSemcol)


State 30

   21 withSemcol: return_stmt •

    $default  reduce using rule 21 (withSemcol)


State 31

   20 withSemcol: array_decl •

    $default  reduce using rule 20 (withSemcol)


State 32

   22 withSemcol: func_call •

    $default  reduce using rule 22 (withSemcol)


State 33

   18 withSemcol: param •
   27 assign_stmt: param • assignment
   39 array_decl: param • '[' INT_CONST ']' array_assign

    ASSIGN  shift, and go to state 55
    '['     shift, and go to state 56

    $default  reduce using rule 18 (withSemcol)

    assignment  go to state 57


State 34

   28 assign_stmt: arr • assignment

    ASSIGN  shift, and go to state 55

    assignment  go to state 58


State 35

   49 param: data_type • ID

    ID  shift, and go to state 59


State 36

   77 constant: SUB • INT_CONST
   81         | SUB • FLOAT_CONST

    INT_CONST    shift, and go to state 60
    FLOAT_CONST  shift, and go to state 61


State 37

   35 conditions: NOT • conditions

    SUB          shift, and go to state 36
    NOT          shift, and go to state 37
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    conditions  go to state 62
    boolean     go to state 43
    func_call   go to state 44
    expr        go to state 45
    value       go to state 46
    arr         go to state 47
    constant    go to state 48


State 38

   76 constant: INT_CONST •

    $default  reduce using rule 76 (constant)


State 39

   79 constant: BOOL_CONST •

    $default  reduce using rule 79 (constant)


State 40

   80 constant: FLOAT_CONST •

    $default  reduce using rule 80 (constant)


State 41

   78 constant: STR_CONST •

    $default  reduce using rule 78 (constant)


State 42

   30 conditional: IF '(' conditions • ')' '{' stmts_list '}' else_stmt

    ')'  shift, and go to state 63


State 43

   33 conditions: boolean •
   34           | boolean • bi_logic_cond conditions
   36 boolean: boolean • rel_op expr

    AND  shift, and go to state 64
    OR   shift, and go to state 65
    XOR  shift, and go to state 66
    LTE  shift, and go to state 67
    GTE  shift, and go to state 68
    EQ   shift, and go to state 69
    NEQ  shift, and go to state 70
    '<'  shift, and go to state 71
    '>'  shift, and go to state 72

    $default  reduce using rule 33 (conditions)

    rel_op         go to state 73
    bi_logic_cond  go to state 74


State 44

   53 value: func_call •

    $default  reduce using rule 53 (value)


State 45

   37 boolean: expr •
   51 expr: expr • op value

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78

    $default  reduce using rule 37 (boolean)

    op  go to state 79


State 46

   52 expr: value •

    $default  reduce using rule 52 (expr)


State 47

   55 value: arr •

    $default  reduce using rule 55 (value)


State 48

   54 value: constant •

    $default  reduce using rule 54 (value)


State 49

    7 function: FUNC function_name '{' • stmts_list '}'

    IF    shift, and go to state 2
    LOOP  shift, and go to state 3

    '}'       reduce using rule 14 (stmts_list)
    $default  reduce using rule 15 ($@1)

    stmts_list     go to state 80
    stmt           go to state 81
    $@1            go to state 10
    withoutSemcol  go to state 11
    loop           go to state 12
    conditional    go to state 13


State 50

    8 function_name: data_type ID • '(' params ')'

    '('  shift, and go to state 82


State 51

   40 func_call: ID '(' • args_list ')'

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    $default  reduce using rule 42 (args_list)

    func_call  go to state 44
    args_list  go to state 83
    args       go to state 84
    expr       go to state 85
    value      go to state 46
    arr        go to state 47
    constant   go to state 48


State 52

   56 arr: ID '[' • expr ']'

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    func_call  go to state 44
    expr       go to state 86
    value      go to state 46
    arr        go to state 47
    constant   go to state 48


State 53

   38 return_stmt: RETURN expr •
   51 expr: expr • op value

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78

    $default  reduce using rule 38 (return_stmt)

    op  go to state 79


State 54

   16 stmt: $@1 withSemcol ';' •

    $default  reduce using rule 16 (stmt)


State 55

   50 assignment: ASSIGN • expr

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    func_call  go to state 44
    expr       go to state 87
    value      go to state 46
    arr        go to state 47
    constant   go to state 48


State 56

   39 array_decl: param '[' • INT_CONST ']' array_assign

    INT_CONST  shift, and go to state 88


State 57

   27 assign_stmt: param assignment •

    $default  reduce using rule 27 (assign_stmt)


State 58

   28 assign_stmt: arr assignment •

    $default  reduce using rule 28 (assign_stmt)


State 59

   49 param: data_type ID •

    $default  reduce using rule 49 (param)


State 60

   77 constant: SUB INT_CONST •

    $default  reduce using rule 77 (constant)


State 61

   81 constant: SUB FLOAT_CONST •

    $default  reduce using rule 81 (constant)


State 62

   35 conditions: NOT conditions •

    $default  reduce using rule 35 (conditions)


State 63

   30 conditional: IF '(' conditions ')' • '{' stmts_list '}' else_stmt

    '{'  shift, and go to state 89


State 64

   73 bi_logic_cond: AND •

    $default  reduce using rule 73 (bi_logic_cond)


State 65

   74 bi_logic_cond: OR •

    $default  reduce using rule 74 (bi_logic_cond)


State 66

   75 bi_logic_cond: XOR •

    $default  reduce using rule 75 (bi_logic_cond)


State 67

   67 rel_op: LTE •

    $default  reduce using rule 67 (rel_op)


State 68

   68 rel_op: GTE •

    $default  reduce using rule 68 (rel_op)


State 69

   71 rel_op: EQ •

    $default  reduce using rule 71 (rel_op)


State 70

   72 rel_op: NEQ •

    $default  reduce using rule 72 (rel_op)


State 71

   69 rel_op: '<' •

    $default  reduce using rule 69 (rel_op)


State 72

   70 rel_op: '>' •

    $default  reduce using rule 70 (rel_op)


State 73

   36 boolean: boolean rel_op • expr

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    func_call  go to state 44
    expr       go to state 90
    value      go to state 46
    arr        go to state 47
    constant   go to state 48


State 74

   34 conditions: boolean bi_logic_cond • conditions

    SUB          shift, and go to state 36
    NOT          shift, and go to state 37
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    conditions  go to state 91
    boolean     go to state 43
    func_call   go to state 44
    expr        go to state 45
    value       go to state 46
    arr         go to state 47
    constant    go to state 48


State 75

   63 op: ADD •

    $default  reduce using rule 63 (op)


State 76

   64 op: SUB •

    $default  reduce using rule 64 (op)


State 77

   65 op: MUL •

    $default  reduce using rule 65 (op)


State 78

   66 op: DIV •

    $default  reduce using rule 66 (op)


State 79

   51 expr: expr op • value

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    func_call  go to state 44
    value      go to state 92
    arr        go to state 47
    constant   go to state 48


State 80

    7 function: FUNC function_name '{' stmts_list • '}'

    '}'  shift, and go to state 93


State 81

   13 stmts_list: stmt • stmts_list

    IF    shift, and go to state 2
    LOOP  shift, and go to state 3

    '}'       reduce using rule 14 (stmts_list)
    $default  reduce using rule 15 ($@1)

    stmts_list     go to state 94
    stmt           go to state 81
    $@1            go to state 10
    withoutSemcol  go to state 11
    loop           go to state 12
    conditional    go to state 13


State 82

    8 function_name: data_type ID '(' • params ')'

    VOID     shift, and go to state 15
    INT      shift, and go to state 16
    DOUBLE   shift, and go to state 17
    BOOLEAN  shift, and go to state 18
    CHAR     shift, and go to state 19

    $default  reduce using rule 10 (params)

    params      go to state 95
    param_list  go to state 96
    param       go to state 97
    data_type   go to state 35


State 83

   40 func_call: ID '(' args_list • ')'

    ')'  shift, and go to state 98


State 84

   41 args_list: args •
   43 args: args • ',' expr

    ','  shift, and go to state 99

    $default  reduce using rule 41 (args_list)


State 85

   44 args: expr •
   51 expr: expr • op value

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78

    $default  reduce using rule 44 (args)

    op  go to state 79


State 86

   51 expr: expr • op value
   56 arr: ID '[' expr • ']'

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    ']'  shift, and go to state 100

    op  go to state 79


State 87

   50 assignment: ASSIGN expr •
   51 expr: expr • op value

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78

    $default  reduce using rule 50 (assignment)

    op  go to state 79


State 88

   39 array_decl: param '[' INT_CONST • ']' array_assign

    ']'  shift, and go to state 101


State 89

   30 conditional: IF '(' conditions ')' '{' • stmts_list '}' else_stmt

    IF    shift, and go to state 2
    LOOP  shift, and go to state 3

    '}'       reduce using rule 14 (stmts_list)
    $default  reduce using rule 15 ($@1)

    stmts_list     go to state 102
    stmt           go to state 81
    $@1            go to state 10
    withoutSemcol  go to state 11
    loop           go to state 12
    conditional    go to state 13


State 90

   36 boolean: boolean rel_op expr •
   51 expr: expr • op value

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78

    $default  reduce using rule 36 (boolean)

    op  go to state 79


State 91

   34 conditions: boolean bi_logic_cond conditions •

    $default  reduce using rule 34 (conditions)


State 92

   51 expr: expr op value •

    $default  reduce using rule 51 (expr)


State 93

    7 function: FUNC function_name '{' stmts_list '}' •

    $default  reduce using rule 7 (function)


State 94

   13 stmts_list: stmt stmts_list •

    $default  reduce using rule 13 (stmts_list)


State 95

    8 function_name: data_type ID '(' params • ')'

    ')'  shift, and go to state 103


State 96

    9 params: param_list •
   11 param_list: param_list • ',' param

    ','  shift, and go to state 104

    $default  reduce using rule 9 (params)


State 97

   12 param_list: param •

    $default  reduce using rule 12 (param_list)


State 98

   40 func_call: ID '(' args_list ')' •

    $default  reduce using rule 40 (func_call)


State 99

   43 args: args ',' • expr

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41
    ID           shift, and go to state 24

    func_call  go to state 44
    expr       go to state 105
    value      go to state 46
    arr        go to state 47
    constant   go to state 48


State 100

   56 arr: ID '[' expr ']' •

    $default  reduce using rule 56 (arr)


State 101

   39 array_decl: param '[' INT_CONST ']' • array_assign

    ASSIGN  shift, and go to state 106

    $default  reduce using rule 46 (array_assign)

    array_assign  go to state 107


State 102

   30 conditional: IF '(' conditions ')' '{' stmts_list • '}' else_stmt

    '}'  shift, and go to state 108


State 103

    8 function_name: data_type ID '(' params ')' •

    $default  reduce using rule 8 (function_name)


State 104

   11 param_list: param_list ',' • param

    VOID     shift, and go to state 15
    INT      shift, and go to state 16
    DOUBLE   shift, and go to state 17
    BOOLEAN  shift, and go to state 18
    CHAR     shift, and go to state 19

    param      go to state 109
    data_type  go to state 35


State 105

   43 args: args ',' expr •
   51 expr: expr • op value

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78

    $default  reduce using rule 43 (args)

    op  go to state 79


State 106

   45 array_assign: ASSIGN • '[' id_list ']'

    '['  shift, and go to state 110


State 107

   39 array_decl: param '[' INT_CONST ']' array_assign •

    $default  reduce using rule 39 (array_decl)


State 108

   30 conditional: IF '(' conditions ')' '{' stmts_list '}' • else_stmt

    ELSE  shift, and go to state 111

    $default  reduce using rule 32 (else_stmt)

    else_stmt  go to state 112


State 109

   11 param_list: param_list ',' param •

    $default  reduce using rule 11 (param_list)


State 110

   45 array_assign: ASSIGN '[' • id_list ']'

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41

    id_list   go to state 113
    constant  go to state 114


State 111

   31 else_stmt: ELSE • '{' stmts_list '}'

    '{'  shift, and go to state 115


State 112

   30 conditional: IF '(' conditions ')' '{' stmts_list '}' else_stmt •

    $default  reduce using rule 30 (conditional)


State 113

   45 array_assign: ASSIGN '[' id_list • ']'
   47 id_list: id_list • ',' constant

    ']'  shift, and go to state 116
    ','  shift, and go to state 117


State 114

   48 id_list: constant •

    $default  reduce using rule 48 (id_list)


State 115

   31 else_stmt: ELSE '{' • stmts_list '}'

    IF    shift, and go to state 2
    LOOP  shift, and go to state 3

    '}'       reduce using rule 14 (stmts_list)
    $default  reduce using rule 15 ($@1)

    stmts_list     go to state 118
    stmt           go to state 81
    $@1            go to state 10
    withoutSemcol  go to state 11
    loop           go to state 12
    conditional    go to state 13


State 116

   45 array_assign: ASSIGN '[' id_list ']' •

    $default  reduce using rule 45 (array_assign)


State 117

   47 id_list: id_list ',' • constant

    SUB          shift, and go to state 36
    INT_CONST    shift, and go to state 38
    BOOL_CONST   shift, and go to state 39
    FLOAT_CONST  shift, and go to state 40
    STR_CONST    shift, and go to state 41

    constant  go to state 119


State 118

   31 else_stmt: ELSE '{' stmts_list • '}'

    '}'  shift, and go to state 120


State 119

   47 id_list: id_list ',' constant •

    $default  reduce using rule 47 (id_list)


State 120

   31 else_stmt: ELSE '{' stmts_list '}' •

    $default  reduce using rule 31 (else_stmt)
