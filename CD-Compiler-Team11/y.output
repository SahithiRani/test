Nonterminals useless in grammar

    arr_optional_assign


Terminals unused in grammar

    ELIF


Rules useless in grammar

   92 arr_optional_assign: arrayBRACKETS
   93                    | opt_assign


Rules useless in parser due to conflicts

   39 isARRAY: %empty


State 2 conflicts: 1 shift/reduce, 17 reduce/reduce
State 69 conflicts: 1 shift/reduce, 2 reduce/reduce
State 135 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: items_list
    2        | error

    3 items_list: item items_list
    4           | %empty

    5 item: function
    6     | stmt

    7 function: FUNC function_name '{' stmts_list '}'

    8 function_name: data_type ID '(' params ')'

    9 params: param_list
   10       | %empty

   11 param_list: param_list ',' param
   12           | param

   13 param: data_type ID arrayBRACKETS

   14 arrayBRACKETS: '[' INT_CONST ']'
   15              | arrayBRACKETS '[' INT_CONST ']'
   16              | %empty

   17 stmts_list: stmt stmts_list
   18           | %empty

   19 stmt: withSemcol ';'
   20     | withoutSemcol

   21 withSemcol: DECLARATION
   22           | assign_stmt
   23           | return_stmt
   24           | func_call
   25           | BREAK
   26           | CONTINUE
   27           | printSTMT

   28 withoutSemcol: loop
   29              | conditional

   30 DECLARATION: data_type id_LIST

   31 id_LIST: oneID ',' id_LIST
   32        | oneID

   33 oneID: ID opt_assign

   34 opt_assign: ASSIGN expr
   35           | %empty

   36 assign_stmt: LHS ASSIGN RHS

   37 LHS: ID isARRAY

   38 isARRAY: arrayBRACKETS
   39        | %empty

   40 RHS: expr
   41    | SCAN '(' data_type ')'

   42 return_stmt: RETURN expr

   43 printSTMT: PRINT '(' printables ')'

   44 printables: printables '+' printable
   45           | printable

   46 printable: STR_CONST
   47          | LHS

   48 func_call: ID '(' args_list ')'

   49 args_list: args
   50          | %empty

   51 args: args ',' expr
   52     | expr

   53 expr: expr op value
   54     | value

   55 value: func_call
   56      | constant
   57      | LHS

   58 loop: LOOP '(' conditions ')' '{' stmts_list '}'

   59 conditional: IF '(' conditions ')' '{' stmts_list '}' else_stmt

   60 else_stmt: ELSE '{' stmts_list '}'
   61          | %empty

   62 conditions: boolean
   63           | boolean bi_logic_OP conditions
   64           | NOT conditions
   65           | '(' conditions ')'

   66 boolean: boolean rel_op expr
   67        | expr

   68 data_type: INT
   69          | BOOLEAN
   70          | CHAR
   71          | DOUBLE
   72          | VOID

   73 op: ADD
   74   | SUB
   75   | MUL
   76   | DIV

   77 rel_op: LTE
   78       | GTE
   79       | '<'
   80       | '>'
   81       | EQ
   82       | NEQ

   83 bi_logic_OP: AND
   84            | OR
   85            | XOR

   86 constant: INT_CONST
   87         | SUB INT_CONST
   88         | STR_CONST
   89         | BOOL_CONST
   90         | FLOAT_CONST
   91         | SUB FLOAT_CONST


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 8 41 43 48 58 59 65
    ')' (41) 8 41 43 48 58 59 65
    '+' (43) 44
    ',' (44) 11 31 51
    ';' (59) 19
    '<' (60) 79
    '>' (62) 80
    '[' (91) 14 15
    ']' (93) 14 15
    '{' (123) 7 58 59 60
    '}' (125) 7 58 59 60
    error (256) 2
    ADD (258) 73
    SUB (259) 74 87 91
    MUL (260) 75
    DIV (261) 76
    ASSIGN (262) 34 36
    AND (263) 83
    OR (264) 84
    XOR (265) 85
    LTE (266) 77
    GTE (267) 78
    EQ (268) 81
    NEQ (269) 82
    NOT (270) 64
    INT_CONST <yint> (271) 14 15 86 87
    BOOL_CONST <yint> (272) 89
    FLOAT_CONST <ydou> (273) 90 91
    STR_CONST <ystr> (274) 46 88
    ID <ystr> (275) 8 13 33 37 48
    IF (276) 59
    ELSE (277) 60
    ELIF (278)
    LOOP (279) 58
    VOID (280) 72
    INT (281) 68
    DOUBLE (282) 71
    BOOLEAN (283) 69
    CHAR (284) 70
    BREAK (285) 25
    PRINT (286) 43
    SCAN (287) 41
    FUNC (288) 7
    RETURN (289) 42
    CONTINUE (290) 26


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    program (48)
        on left: 1 2
        on right: 0
    items_list (49)
        on left: 3 4
        on right: 1 3
    item (50)
        on left: 5 6
        on right: 3
    function (51)
        on left: 7
        on right: 5
    function_name (52)
        on left: 8
        on right: 7
    params (53)
        on left: 9 10
        on right: 8
    param_list (54)
        on left: 11 12
        on right: 9 11
    param (55)
        on left: 13
        on right: 11 12
    arrayBRACKETS (56)
        on left: 14 15 16
        on right: 13 15 38
    stmts_list (57)
        on left: 17 18
        on right: 7 17 58 59 60
    stmt (58)
        on left: 19 20
        on right: 6 17
    withSemcol (59)
        on left: 21 22 23 24 25 26 27
        on right: 19
    withoutSemcol (60)
        on left: 28 29
        on right: 20
    DECLARATION (61)
        on left: 30
        on right: 21
    id_LIST (62)
        on left: 31 32
        on right: 30 31
    oneID (63)
        on left: 33
        on right: 31 32
    opt_assign (64)
        on left: 34 35
        on right: 33
    assign_stmt (65)
        on left: 36
        on right: 22
    LHS (66)
        on left: 37
        on right: 36 47 57
    isARRAY (67)
        on left: 38 39
        on right: 37
    RHS (68)
        on left: 40 41
        on right: 36
    return_stmt (69)
        on left: 42
        on right: 23
    printSTMT (70)
        on left: 43
        on right: 27
    printables (71)
        on left: 44 45
        on right: 43 44
    printable (72)
        on left: 46 47
        on right: 44 45
    func_call (73)
        on left: 48
        on right: 24 55
    args_list (74)
        on left: 49 50
        on right: 48
    args (75)
        on left: 51 52
        on right: 49 51
    expr (76)
        on left: 53 54
        on right: 34 40 42 51 52 53 66 67
    value (77)
        on left: 55 56 57
        on right: 53 54
    loop (78)
        on left: 58
        on right: 28
    conditional (79)
        on left: 59
        on right: 29
    else_stmt (80)
        on left: 60 61
        on right: 59
    conditions (81)
        on left: 62 63 64 65
        on right: 58 59 63 64 65
    boolean (82)
        on left: 66 67
        on right: 62 63 66
    data_type (83)
        on left: 68 69 70 71 72
        on right: 8 13 30 41
    op (84)
        on left: 73 74 75 76
        on right: 53
    rel_op (85)
        on left: 77 78 79 80 81 82
        on right: 66
    bi_logic_OP (86)
        on left: 83 84 85
        on right: 63
    constant (87)
        on left: 86 87 88 89 90 91
        on right: 56


State 0

    0 $accept: • program $end

    error     shift, and go to state 1
    ID        shift, and go to state 2
    IF        shift, and go to state 3
    LOOP      shift, and go to state 4
    VOID      shift, and go to state 5
    INT       shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOLEAN   shift, and go to state 8
    CHAR      shift, and go to state 9
    BREAK     shift, and go to state 10
    PRINT     shift, and go to state 11
    FUNC      shift, and go to state 12
    RETURN    shift, and go to state 13
    CONTINUE  shift, and go to state 14

    $end  reduce using rule 4 (items_list)

    program        go to state 15
    items_list     go to state 16
    item           go to state 17
    function       go to state 18
    stmt           go to state 19
    withSemcol     go to state 20
    withoutSemcol  go to state 21
    DECLARATION    go to state 22
    assign_stmt    go to state 23
    LHS            go to state 24
    return_stmt    go to state 25
    printSTMT      go to state 26
    func_call      go to state 27
    loop           go to state 28
    conditional    go to state 29
    data_type      go to state 30


State 1

    2 program: error •

    $default  reduce using rule 2 (program)


State 2

   37 LHS: ID • isARRAY
   48 func_call: ID • '(' args_list ')'

    '('  shift, and go to state 31
    '['  shift, and go to state 32

    ADD       reduce using rule 16 (arrayBRACKETS)
    ADD       [reduce using rule 39 (isARRAY)]
    SUB       reduce using rule 16 (arrayBRACKETS)
    SUB       [reduce using rule 39 (isARRAY)]
    MUL       reduce using rule 16 (arrayBRACKETS)
    MUL       [reduce using rule 39 (isARRAY)]
    DIV       reduce using rule 16 (arrayBRACKETS)
    DIV       [reduce using rule 39 (isARRAY)]
    ASSIGN    reduce using rule 16 (arrayBRACKETS)
    ASSIGN    [reduce using rule 39 (isARRAY)]
    AND       reduce using rule 16 (arrayBRACKETS)
    AND       [reduce using rule 39 (isARRAY)]
    OR        reduce using rule 16 (arrayBRACKETS)
    OR        [reduce using rule 39 (isARRAY)]
    XOR       reduce using rule 16 (arrayBRACKETS)
    XOR       [reduce using rule 39 (isARRAY)]
    LTE       reduce using rule 16 (arrayBRACKETS)
    LTE       [reduce using rule 39 (isARRAY)]
    GTE       reduce using rule 16 (arrayBRACKETS)
    GTE       [reduce using rule 39 (isARRAY)]
    EQ        reduce using rule 16 (arrayBRACKETS)
    EQ        [reduce using rule 39 (isARRAY)]
    NEQ       reduce using rule 16 (arrayBRACKETS)
    NEQ       [reduce using rule 39 (isARRAY)]
    ';'       reduce using rule 16 (arrayBRACKETS)
    ';'       [reduce using rule 39 (isARRAY)]
    '<'       reduce using rule 16 (arrayBRACKETS)
    '<'       [reduce using rule 39 (isARRAY)]
    '>'       reduce using rule 16 (arrayBRACKETS)
    '>'       [reduce using rule 39 (isARRAY)]
    ')'       reduce using rule 16 (arrayBRACKETS)
    ')'       [reduce using rule 39 (isARRAY)]
    '['       [reduce using rule 16 (arrayBRACKETS)]
    ','       reduce using rule 16 (arrayBRACKETS)
    ','       [reduce using rule 39 (isARRAY)]
    $default  reduce using rule 16 (arrayBRACKETS)

    arrayBRACKETS  go to state 33
    isARRAY        go to state 34

    shift/reduce conflict on token '[':
       16 arrayBRACKETS: • %empty
       14 arrayBRACKETS: • '[' INT_CONST ']'
      First example: ID • '[' INT_CONST ']' ';' items_list $end
      Shift derivation
        $accept
        ↳ program                                               $end
          ↳ items_list
            ↳ item                                   items_list
              ↳ stmt
                ↳ withSemcol                     ';'
                  ↳ LHS
                    ↳ ID isARRAY
                         ↳ arrayBRACKETS
                           ↳ • '[' INT_CONST ']'
      Second example: ID • '[' INT_CONST ']' ASSIGN RHS ';' items_list $end
      Reduce derivation
        $accept
        ↳ program                                                                        $end
          ↳ items_list
            ↳ item                                                            items_list
              ↳ stmt
                ↳ withSemcol                                              ';'
                  ↳ assign_stmt
                    ↳ LHS                                      ASSIGN RHS
                      ↳ ID isARRAY
                           ↳ arrayBRACKETS
                             ↳ arrayBRACKETS '[' INT_CONST ']'
                               ↳ •

    reduce/reduce conflict on tokens ADD, SUB, MUL, DIV, ASSIGN, AND, OR, XOR, LTE, GTE, EQ, NEQ, ';', '<', '>', ')', ',':
       16 arrayBRACKETS: • %empty
       39 isARRAY: • %empty
      Example: •
      First reduce derivation
        isARRAY
        ↳ arrayBRACKETS
          ↳ •
      Second reduce derivation
        isARRAY
        ↳ •



State 3

   59 conditional: IF • '(' conditions ')' '{' stmts_list '}' else_stmt

    '('  shift, and go to state 35


State 4

   58 loop: LOOP • '(' conditions ')' '{' stmts_list '}'

    '('  shift, and go to state 36


State 5

   72 data_type: VOID •

    $default  reduce using rule 72 (data_type)


State 6

   68 data_type: INT •

    $default  reduce using rule 68 (data_type)


State 7

   71 data_type: DOUBLE •

    $default  reduce using rule 71 (data_type)


State 8

   69 data_type: BOOLEAN •

    $default  reduce using rule 69 (data_type)


State 9

   70 data_type: CHAR •

    $default  reduce using rule 70 (data_type)


State 10

   25 withSemcol: BREAK •

    $default  reduce using rule 25 (withSemcol)


State 11

   43 printSTMT: PRINT • '(' printables ')'

    '('  shift, and go to state 37


State 12

    7 function: FUNC • function_name '{' stmts_list '}'

    VOID     shift, and go to state 5
    INT      shift, and go to state 6
    DOUBLE   shift, and go to state 7
    BOOLEAN  shift, and go to state 8
    CHAR     shift, and go to state 9

    function_name  go to state 38
    data_type      go to state 39


State 13

   42 return_stmt: RETURN • expr

    SUB          shift, and go to state 40
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2

    LHS        go to state 45
    func_call  go to state 46
    expr       go to state 47
    value      go to state 48
    constant   go to state 49


State 14

   26 withSemcol: CONTINUE •

    $default  reduce using rule 26 (withSemcol)


State 15

    0 $accept: program • $end

    $end  shift, and go to state 50


State 16

    1 program: items_list •

    $default  reduce using rule 1 (program)


State 17

    3 items_list: item • items_list

    ID        shift, and go to state 2
    IF        shift, and go to state 3
    LOOP      shift, and go to state 4
    VOID      shift, and go to state 5
    INT       shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOLEAN   shift, and go to state 8
    CHAR      shift, and go to state 9
    BREAK     shift, and go to state 10
    PRINT     shift, and go to state 11
    FUNC      shift, and go to state 12
    RETURN    shift, and go to state 13
    CONTINUE  shift, and go to state 14

    $default  reduce using rule 4 (items_list)

    items_list     go to state 51
    item           go to state 17
    function       go to state 18
    stmt           go to state 19
    withSemcol     go to state 20
    withoutSemcol  go to state 21
    DECLARATION    go to state 22
    assign_stmt    go to state 23
    LHS            go to state 24
    return_stmt    go to state 25
    printSTMT      go to state 26
    func_call      go to state 27
    loop           go to state 28
    conditional    go to state 29
    data_type      go to state 30


State 18

    5 item: function •

    $default  reduce using rule 5 (item)


State 19

    6 item: stmt •

    $default  reduce using rule 6 (item)


State 20

   19 stmt: withSemcol • ';'

    ';'  shift, and go to state 52


State 21

   20 stmt: withoutSemcol •

    $default  reduce using rule 20 (stmt)


State 22

   21 withSemcol: DECLARATION •

    $default  reduce using rule 21 (withSemcol)


State 23

   22 withSemcol: assign_stmt •

    $default  reduce using rule 22 (withSemcol)


State 24

   36 assign_stmt: LHS • ASSIGN RHS

    ASSIGN  shift, and go to state 53


State 25

   23 withSemcol: return_stmt •

    $default  reduce using rule 23 (withSemcol)


State 26

   27 withSemcol: printSTMT •

    $default  reduce using rule 27 (withSemcol)


State 27

   24 withSemcol: func_call •

    $default  reduce using rule 24 (withSemcol)


State 28

   28 withoutSemcol: loop •

    $default  reduce using rule 28 (withoutSemcol)


State 29

   29 withoutSemcol: conditional •

    $default  reduce using rule 29 (withoutSemcol)


State 30

   30 DECLARATION: data_type • id_LIST

    ID  shift, and go to state 54

    id_LIST  go to state 55
    oneID    go to state 56


State 31

   48 func_call: ID '(' • args_list ')'

    SUB          shift, and go to state 40
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2

    $default  reduce using rule 50 (args_list)

    LHS        go to state 45
    func_call  go to state 46
    args_list  go to state 57
    args       go to state 58
    expr       go to state 59
    value      go to state 48
    constant   go to state 49


State 32

   14 arrayBRACKETS: '[' • INT_CONST ']'

    INT_CONST  shift, and go to state 60


State 33

   15 arrayBRACKETS: arrayBRACKETS • '[' INT_CONST ']'
   38 isARRAY: arrayBRACKETS •

    '['  shift, and go to state 61

    $default  reduce using rule 38 (isARRAY)


State 34

   37 LHS: ID isARRAY •

    $default  reduce using rule 37 (LHS)


State 35

   59 conditional: IF '(' • conditions ')' '{' stmts_list '}' else_stmt

    SUB          shift, and go to state 40
    NOT          shift, and go to state 62
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2
    '('          shift, and go to state 63

    LHS         go to state 45
    func_call   go to state 46
    expr        go to state 64
    value       go to state 48
    conditions  go to state 65
    boolean     go to state 66
    constant    go to state 49


State 36

   58 loop: LOOP '(' • conditions ')' '{' stmts_list '}'

    SUB          shift, and go to state 40
    NOT          shift, and go to state 62
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2
    '('          shift, and go to state 63

    LHS         go to state 45
    func_call   go to state 46
    expr        go to state 64
    value       go to state 48
    conditions  go to state 67
    boolean     go to state 66
    constant    go to state 49


State 37

   43 printSTMT: PRINT '(' • printables ')'

    STR_CONST  shift, and go to state 68
    ID         shift, and go to state 69

    LHS         go to state 70
    printables  go to state 71
    printable   go to state 72


State 38

    7 function: FUNC function_name • '{' stmts_list '}'

    '{'  shift, and go to state 73


State 39

    8 function_name: data_type • ID '(' params ')'

    ID  shift, and go to state 74


State 40

   87 constant: SUB • INT_CONST
   91         | SUB • FLOAT_CONST

    INT_CONST    shift, and go to state 75
    FLOAT_CONST  shift, and go to state 76


State 41

   86 constant: INT_CONST •

    $default  reduce using rule 86 (constant)


State 42

   89 constant: BOOL_CONST •

    $default  reduce using rule 89 (constant)


State 43

   90 constant: FLOAT_CONST •

    $default  reduce using rule 90 (constant)


State 44

   88 constant: STR_CONST •

    $default  reduce using rule 88 (constant)


State 45

   57 value: LHS •

    $default  reduce using rule 57 (value)


State 46

   55 value: func_call •

    $default  reduce using rule 55 (value)


State 47

   42 return_stmt: RETURN expr •
   53 expr: expr • op value

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80

    $default  reduce using rule 42 (return_stmt)

    op  go to state 81


State 48

   54 expr: value •

    $default  reduce using rule 54 (expr)


State 49

   56 value: constant •

    $default  reduce using rule 56 (value)


State 50

    0 $accept: program $end •

    $default  accept


State 51

    3 items_list: item items_list •

    $default  reduce using rule 3 (items_list)


State 52

   19 stmt: withSemcol ';' •

    $default  reduce using rule 19 (stmt)


State 53

   36 assign_stmt: LHS ASSIGN • RHS

    SUB          shift, and go to state 40
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2
    SCAN         shift, and go to state 82

    LHS        go to state 45
    RHS        go to state 83
    func_call  go to state 46
    expr       go to state 84
    value      go to state 48
    constant   go to state 49


State 54

   33 oneID: ID • opt_assign

    ASSIGN  shift, and go to state 85

    $default  reduce using rule 35 (opt_assign)

    opt_assign  go to state 86


State 55

   30 DECLARATION: data_type id_LIST •

    $default  reduce using rule 30 (DECLARATION)


State 56

   31 id_LIST: oneID • ',' id_LIST
   32        | oneID •

    ','  shift, and go to state 87

    $default  reduce using rule 32 (id_LIST)


State 57

   48 func_call: ID '(' args_list • ')'

    ')'  shift, and go to state 88


State 58

   49 args_list: args •
   51 args: args • ',' expr

    ','  shift, and go to state 89

    $default  reduce using rule 49 (args_list)


State 59

   52 args: expr •
   53 expr: expr • op value

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80

    $default  reduce using rule 52 (args)

    op  go to state 81


State 60

   14 arrayBRACKETS: '[' INT_CONST • ']'

    ']'  shift, and go to state 90


State 61

   15 arrayBRACKETS: arrayBRACKETS '[' • INT_CONST ']'

    INT_CONST  shift, and go to state 91


State 62

   64 conditions: NOT • conditions

    SUB          shift, and go to state 40
    NOT          shift, and go to state 62
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2
    '('          shift, and go to state 63

    LHS         go to state 45
    func_call   go to state 46
    expr        go to state 64
    value       go to state 48
    conditions  go to state 92
    boolean     go to state 66
    constant    go to state 49


State 63

   65 conditions: '(' • conditions ')'

    SUB          shift, and go to state 40
    NOT          shift, and go to state 62
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2
    '('          shift, and go to state 63

    LHS         go to state 45
    func_call   go to state 46
    expr        go to state 64
    value       go to state 48
    conditions  go to state 93
    boolean     go to state 66
    constant    go to state 49


State 64

   53 expr: expr • op value
   67 boolean: expr •

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80

    $default  reduce using rule 67 (boolean)

    op  go to state 81


State 65

   59 conditional: IF '(' conditions • ')' '{' stmts_list '}' else_stmt

    ')'  shift, and go to state 94


State 66

   62 conditions: boolean •
   63           | boolean • bi_logic_OP conditions
   66 boolean: boolean • rel_op expr

    AND  shift, and go to state 95
    OR   shift, and go to state 96
    XOR  shift, and go to state 97
    LTE  shift, and go to state 98
    GTE  shift, and go to state 99
    EQ   shift, and go to state 100
    NEQ  shift, and go to state 101
    '<'  shift, and go to state 102
    '>'  shift, and go to state 103

    $default  reduce using rule 62 (conditions)

    rel_op       go to state 104
    bi_logic_OP  go to state 105


State 67

   58 loop: LOOP '(' conditions • ')' '{' stmts_list '}'

    ')'  shift, and go to state 106


State 68

   46 printable: STR_CONST •

    $default  reduce using rule 46 (printable)


State 69

   37 LHS: ID • isARRAY

    '['  shift, and go to state 32

    ')'       reduce using rule 16 (arrayBRACKETS)
    ')'       [reduce using rule 39 (isARRAY)]
    '['       [reduce using rule 16 (arrayBRACKETS)]
    '+'       reduce using rule 16 (arrayBRACKETS)
    '+'       [reduce using rule 39 (isARRAY)]
    $default  reduce using rule 16 (arrayBRACKETS)

    arrayBRACKETS  go to state 33
    isARRAY        go to state 34

    shift/reduce conflict on token '[':
       16 arrayBRACKETS: • %empty
       14 arrayBRACKETS: • '[' INT_CONST ']'
      First example: PRINT '(' ID • '[' INT_CONST ']' ')' ';' items_list $end
      Shift derivation
        $accept
        ↳ program                                                                 $end
          ↳ items_list
            ↳ item                                                     items_list
              ↳ stmt
                ↳ withSemcol                                       ';'
                  ↳ printSTMT
                    ↳ PRINT '(' printables                     ')'
                                ↳ LHS
                                  ↳ ID isARRAY
                                       ↳ arrayBRACKETS
                                         ↳ • '[' INT_CONST ']'
      Second example: PRINT '(' ID • '[' INT_CONST ']' ')' ';' items_list $end
      Reduce derivation
        $accept
        ↳ program                                                                               $end
          ↳ items_list
            ↳ item                                                                   items_list
              ↳ stmt
                ↳ withSemcol                                                     ';'
                  ↳ printSTMT
                    ↳ PRINT '(' printables                                   ')'
                                ↳ printable
                                  ↳ LHS
                                    ↳ ID isARRAY
                                         ↳ arrayBRACKETS
                                           ↳ arrayBRACKETS '[' INT_CONST ']'
                                             ↳ •

    reduce/reduce conflict on tokens ')', '+':
       16 arrayBRACKETS: • %empty
       39 isARRAY: • %empty
      Example: •
      First reduce derivation
        isARRAY
        ↳ arrayBRACKETS
          ↳ •
      Second reduce derivation
        isARRAY
        ↳ •



State 70

   47 printable: LHS •

    $default  reduce using rule 47 (printable)


State 71

   43 printSTMT: PRINT '(' printables • ')'
   44 printables: printables • '+' printable

    ')'  shift, and go to state 107
    '+'  shift, and go to state 108


State 72

   45 printables: printable •

    $default  reduce using rule 45 (printables)


State 73

    7 function: FUNC function_name '{' • stmts_list '}'

    ID        shift, and go to state 2
    IF        shift, and go to state 3
    LOOP      shift, and go to state 4
    VOID      shift, and go to state 5
    INT       shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOLEAN   shift, and go to state 8
    CHAR      shift, and go to state 9
    BREAK     shift, and go to state 10
    PRINT     shift, and go to state 11
    RETURN    shift, and go to state 13
    CONTINUE  shift, and go to state 14

    $default  reduce using rule 18 (stmts_list)

    stmts_list     go to state 109
    stmt           go to state 110
    withSemcol     go to state 20
    withoutSemcol  go to state 21
    DECLARATION    go to state 22
    assign_stmt    go to state 23
    LHS            go to state 24
    return_stmt    go to state 25
    printSTMT      go to state 26
    func_call      go to state 27
    loop           go to state 28
    conditional    go to state 29
    data_type      go to state 30


State 74

    8 function_name: data_type ID • '(' params ')'

    '('  shift, and go to state 111


State 75

   87 constant: SUB INT_CONST •

    $default  reduce using rule 87 (constant)


State 76

   91 constant: SUB FLOAT_CONST •

    $default  reduce using rule 91 (constant)


State 77

   73 op: ADD •

    $default  reduce using rule 73 (op)


State 78

   74 op: SUB •

    $default  reduce using rule 74 (op)


State 79

   75 op: MUL •

    $default  reduce using rule 75 (op)


State 80

   76 op: DIV •

    $default  reduce using rule 76 (op)


State 81

   53 expr: expr op • value

    SUB          shift, and go to state 40
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2

    LHS        go to state 45
    func_call  go to state 46
    value      go to state 112
    constant   go to state 49


State 82

   41 RHS: SCAN • '(' data_type ')'

    '('  shift, and go to state 113


State 83

   36 assign_stmt: LHS ASSIGN RHS •

    $default  reduce using rule 36 (assign_stmt)


State 84

   40 RHS: expr •
   53 expr: expr • op value

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80

    $default  reduce using rule 40 (RHS)

    op  go to state 81


State 85

   34 opt_assign: ASSIGN • expr

    SUB          shift, and go to state 40
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2

    LHS        go to state 45
    func_call  go to state 46
    expr       go to state 114
    value      go to state 48
    constant   go to state 49


State 86

   33 oneID: ID opt_assign •

    $default  reduce using rule 33 (oneID)


State 87

   31 id_LIST: oneID ',' • id_LIST

    ID  shift, and go to state 54

    id_LIST  go to state 115
    oneID    go to state 56


State 88

   48 func_call: ID '(' args_list ')' •

    $default  reduce using rule 48 (func_call)


State 89

   51 args: args ',' • expr

    SUB          shift, and go to state 40
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2

    LHS        go to state 45
    func_call  go to state 46
    expr       go to state 116
    value      go to state 48
    constant   go to state 49


State 90

   14 arrayBRACKETS: '[' INT_CONST ']' •

    $default  reduce using rule 14 (arrayBRACKETS)


State 91

   15 arrayBRACKETS: arrayBRACKETS '[' INT_CONST • ']'

    ']'  shift, and go to state 117


State 92

   64 conditions: NOT conditions •

    $default  reduce using rule 64 (conditions)


State 93

   65 conditions: '(' conditions • ')'

    ')'  shift, and go to state 118


State 94

   59 conditional: IF '(' conditions ')' • '{' stmts_list '}' else_stmt

    '{'  shift, and go to state 119


State 95

   83 bi_logic_OP: AND •

    $default  reduce using rule 83 (bi_logic_OP)


State 96

   84 bi_logic_OP: OR •

    $default  reduce using rule 84 (bi_logic_OP)


State 97

   85 bi_logic_OP: XOR •

    $default  reduce using rule 85 (bi_logic_OP)


State 98

   77 rel_op: LTE •

    $default  reduce using rule 77 (rel_op)


State 99

   78 rel_op: GTE •

    $default  reduce using rule 78 (rel_op)


State 100

   81 rel_op: EQ •

    $default  reduce using rule 81 (rel_op)


State 101

   82 rel_op: NEQ •

    $default  reduce using rule 82 (rel_op)


State 102

   79 rel_op: '<' •

    $default  reduce using rule 79 (rel_op)


State 103

   80 rel_op: '>' •

    $default  reduce using rule 80 (rel_op)


State 104

   66 boolean: boolean rel_op • expr

    SUB          shift, and go to state 40
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2

    LHS        go to state 45
    func_call  go to state 46
    expr       go to state 120
    value      go to state 48
    constant   go to state 49


State 105

   63 conditions: boolean bi_logic_OP • conditions

    SUB          shift, and go to state 40
    NOT          shift, and go to state 62
    INT_CONST    shift, and go to state 41
    BOOL_CONST   shift, and go to state 42
    FLOAT_CONST  shift, and go to state 43
    STR_CONST    shift, and go to state 44
    ID           shift, and go to state 2
    '('          shift, and go to state 63

    LHS         go to state 45
    func_call   go to state 46
    expr        go to state 64
    value       go to state 48
    conditions  go to state 121
    boolean     go to state 66
    constant    go to state 49


State 106

   58 loop: LOOP '(' conditions ')' • '{' stmts_list '}'

    '{'  shift, and go to state 122


State 107

   43 printSTMT: PRINT '(' printables ')' •

    $default  reduce using rule 43 (printSTMT)


State 108

   44 printables: printables '+' • printable

    STR_CONST  shift, and go to state 68
    ID         shift, and go to state 69

    LHS        go to state 70
    printable  go to state 123


State 109

    7 function: FUNC function_name '{' stmts_list • '}'

    '}'  shift, and go to state 124


State 110

   17 stmts_list: stmt • stmts_list

    ID        shift, and go to state 2
    IF        shift, and go to state 3
    LOOP      shift, and go to state 4
    VOID      shift, and go to state 5
    INT       shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOLEAN   shift, and go to state 8
    CHAR      shift, and go to state 9
    BREAK     shift, and go to state 10
    PRINT     shift, and go to state 11
    RETURN    shift, and go to state 13
    CONTINUE  shift, and go to state 14

    $default  reduce using rule 18 (stmts_list)

    stmts_list     go to state 125
    stmt           go to state 110
    withSemcol     go to state 20
    withoutSemcol  go to state 21
    DECLARATION    go to state 22
    assign_stmt    go to state 23
    LHS            go to state 24
    return_stmt    go to state 25
    printSTMT      go to state 26
    func_call      go to state 27
    loop           go to state 28
    conditional    go to state 29
    data_type      go to state 30


State 111

    8 function_name: data_type ID '(' • params ')'

    VOID     shift, and go to state 5
    INT      shift, and go to state 6
    DOUBLE   shift, and go to state 7
    BOOLEAN  shift, and go to state 8
    CHAR     shift, and go to state 9

    $default  reduce using rule 10 (params)

    params      go to state 126
    param_list  go to state 127
    param       go to state 128
    data_type   go to state 129


State 112

   53 expr: expr op value •

    $default  reduce using rule 53 (expr)


State 113

   41 RHS: SCAN '(' • data_type ')'

    VOID     shift, and go to state 5
    INT      shift, and go to state 6
    DOUBLE   shift, and go to state 7
    BOOLEAN  shift, and go to state 8
    CHAR     shift, and go to state 9

    data_type  go to state 130


State 114

   34 opt_assign: ASSIGN expr •
   53 expr: expr • op value

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80

    $default  reduce using rule 34 (opt_assign)

    op  go to state 81


State 115

   31 id_LIST: oneID ',' id_LIST •

    $default  reduce using rule 31 (id_LIST)


State 116

   51 args: args ',' expr •
   53 expr: expr • op value

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80

    $default  reduce using rule 51 (args)

    op  go to state 81


State 117

   15 arrayBRACKETS: arrayBRACKETS '[' INT_CONST ']' •

    $default  reduce using rule 15 (arrayBRACKETS)


State 118

   65 conditions: '(' conditions ')' •

    $default  reduce using rule 65 (conditions)


State 119

   59 conditional: IF '(' conditions ')' '{' • stmts_list '}' else_stmt

    ID        shift, and go to state 2
    IF        shift, and go to state 3
    LOOP      shift, and go to state 4
    VOID      shift, and go to state 5
    INT       shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOLEAN   shift, and go to state 8
    CHAR      shift, and go to state 9
    BREAK     shift, and go to state 10
    PRINT     shift, and go to state 11
    RETURN    shift, and go to state 13
    CONTINUE  shift, and go to state 14

    $default  reduce using rule 18 (stmts_list)

    stmts_list     go to state 131
    stmt           go to state 110
    withSemcol     go to state 20
    withoutSemcol  go to state 21
    DECLARATION    go to state 22
    assign_stmt    go to state 23
    LHS            go to state 24
    return_stmt    go to state 25
    printSTMT      go to state 26
    func_call      go to state 27
    loop           go to state 28
    conditional    go to state 29
    data_type      go to state 30


State 120

   53 expr: expr • op value
   66 boolean: boolean rel_op expr •

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80

    $default  reduce using rule 66 (boolean)

    op  go to state 81


State 121

   63 conditions: boolean bi_logic_OP conditions •

    $default  reduce using rule 63 (conditions)


State 122

   58 loop: LOOP '(' conditions ')' '{' • stmts_list '}'

    ID        shift, and go to state 2
    IF        shift, and go to state 3
    LOOP      shift, and go to state 4
    VOID      shift, and go to state 5
    INT       shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOLEAN   shift, and go to state 8
    CHAR      shift, and go to state 9
    BREAK     shift, and go to state 10
    PRINT     shift, and go to state 11
    RETURN    shift, and go to state 13
    CONTINUE  shift, and go to state 14

    $default  reduce using rule 18 (stmts_list)

    stmts_list     go to state 132
    stmt           go to state 110
    withSemcol     go to state 20
    withoutSemcol  go to state 21
    DECLARATION    go to state 22
    assign_stmt    go to state 23
    LHS            go to state 24
    return_stmt    go to state 25
    printSTMT      go to state 26
    func_call      go to state 27
    loop           go to state 28
    conditional    go to state 29
    data_type      go to state 30


State 123

   44 printables: printables '+' printable •

    $default  reduce using rule 44 (printables)


State 124

    7 function: FUNC function_name '{' stmts_list '}' •

    $default  reduce using rule 7 (function)


State 125

   17 stmts_list: stmt stmts_list •

    $default  reduce using rule 17 (stmts_list)


State 126

    8 function_name: data_type ID '(' params • ')'

    ')'  shift, and go to state 133


State 127

    9 params: param_list •
   11 param_list: param_list • ',' param

    ','  shift, and go to state 134

    $default  reduce using rule 9 (params)


State 128

   12 param_list: param •

    $default  reduce using rule 12 (param_list)


State 129

   13 param: data_type • ID arrayBRACKETS

    ID  shift, and go to state 135


State 130

   41 RHS: SCAN '(' data_type • ')'

    ')'  shift, and go to state 136


State 131

   59 conditional: IF '(' conditions ')' '{' stmts_list • '}' else_stmt

    '}'  shift, and go to state 137


State 132

   58 loop: LOOP '(' conditions ')' '{' stmts_list • '}'

    '}'  shift, and go to state 138


State 133

    8 function_name: data_type ID '(' params ')' •

    $default  reduce using rule 8 (function_name)


State 134

   11 param_list: param_list ',' • param

    VOID     shift, and go to state 5
    INT      shift, and go to state 6
    DOUBLE   shift, and go to state 7
    BOOLEAN  shift, and go to state 8
    CHAR     shift, and go to state 9

    param      go to state 139
    data_type  go to state 129


State 135

   13 param: data_type ID • arrayBRACKETS

    '['  shift, and go to state 32

    '['       [reduce using rule 16 (arrayBRACKETS)]
    $default  reduce using rule 16 (arrayBRACKETS)

    arrayBRACKETS  go to state 140

    shift/reduce conflict on token '[':
       16 arrayBRACKETS: • %empty
       14 arrayBRACKETS: • '[' INT_CONST ']'
      Example: • '[' INT_CONST ']'
      Shift derivation
        arrayBRACKETS
        ↳ • '[' INT_CONST ']'
      Reduce derivation
        arrayBRACKETS
        ↳ arrayBRACKETS '[' INT_CONST ']'
          ↳ •



State 136

   41 RHS: SCAN '(' data_type ')' •

    $default  reduce using rule 41 (RHS)


State 137

   59 conditional: IF '(' conditions ')' '{' stmts_list '}' • else_stmt

    ELSE  shift, and go to state 141

    $default  reduce using rule 61 (else_stmt)

    else_stmt  go to state 142


State 138

   58 loop: LOOP '(' conditions ')' '{' stmts_list '}' •

    $default  reduce using rule 58 (loop)


State 139

   11 param_list: param_list ',' param •

    $default  reduce using rule 11 (param_list)


State 140

   13 param: data_type ID arrayBRACKETS •
   15 arrayBRACKETS: arrayBRACKETS • '[' INT_CONST ']'

    '['  shift, and go to state 61

    $default  reduce using rule 13 (param)


State 141

   60 else_stmt: ELSE • '{' stmts_list '}'

    '{'  shift, and go to state 143


State 142

   59 conditional: IF '(' conditions ')' '{' stmts_list '}' else_stmt •

    $default  reduce using rule 59 (conditional)


State 143

   60 else_stmt: ELSE '{' • stmts_list '}'

    ID        shift, and go to state 2
    IF        shift, and go to state 3
    LOOP      shift, and go to state 4
    VOID      shift, and go to state 5
    INT       shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOLEAN   shift, and go to state 8
    CHAR      shift, and go to state 9
    BREAK     shift, and go to state 10
    PRINT     shift, and go to state 11
    RETURN    shift, and go to state 13
    CONTINUE  shift, and go to state 14

    $default  reduce using rule 18 (stmts_list)

    stmts_list     go to state 144
    stmt           go to state 110
    withSemcol     go to state 20
    withoutSemcol  go to state 21
    DECLARATION    go to state 22
    assign_stmt    go to state 23
    LHS            go to state 24
    return_stmt    go to state 25
    printSTMT      go to state 26
    func_call      go to state 27
    loop           go to state 28
    conditional    go to state 29
    data_type      go to state 30


State 144

   60 else_stmt: ELSE '{' stmts_list • '}'

    '}'  shift, and go to state 145


State 145

   60 else_stmt: ELSE '{' stmts_list '}' •

    $default  reduce using rule 60 (else_stmt)
